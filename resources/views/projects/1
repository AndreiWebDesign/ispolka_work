@extends('layouts.app')
@section('title', '–û–±—ä–µ–∫—Ç: ' . ($passport->object_name ?? $passport->id))

@section('content')
    <div class="container py-4">
        <h2 class="mb-3">–û–±—ä–µ–∫—Ç: {{ $passport->object_name ?? $passport->id }}</h2>

        @if ($role === '–ø–æ–¥—Ä—è–¥—á–∏–∫')
            <div class="mb-4">
                <a href="{{ route('acts.create', $passport) }}" class="btn btn-success">
                    <i class="bi bi-plus-lg me-1"></i> –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç
                </a>
            </div>
        @endif

        @if (session('success'))
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                {{ session('success') }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
            </div>
        @endif
        @if (session('error'))
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                {{ session('error') }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
            </div>
        @endif
        @if(auth()->user()->role === '–ø–æ–¥—Ä—è–¥—á–∏–∫')
            <div class="mb-3">
                <form method="POST" action="{{ route('projects.invite', $passport) }}" class="row g-2 align-items-end">
                    @csrf
                    <div class="col-sm-4">
                        <label for="bin" class="form-label mb-1">–ë–ò–ù –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</label>
                        <input name="bin" required id="bin" class="form-control" placeholder="–í–≤–µ–¥–∏—Ç–µ –ë–ò–ù">
                    </div>
                    <div class="col-sm-4">
                        <label for="role" class="form-label mb-1">–†–æ–ª—å</label>
                        <select name="role" id="role" class="form-select" required>
                            <option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å</option>
                            <option value="—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä</option>
                            <option value="–∞–≤—Ç–æ—Ä–Ω–∞–¥–∑–æ—Ä">–ê–≤—Ç–æ—Ä—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä</option>
                        </select>
                    </div>
                    <div class="col-sm-4">
                        <button type="submit" class="btn btn-outline-primary w-100">
                            <i class="bi bi-person-plus me-1"></i> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
                        </button>
                    </div>
                </form>
            </div>
        @endif
        <h4 class="mb-3">–°–ø–∏—Å–æ–∫ –∞–∫—Ç–æ–≤</h4>



        @if ($acts->isEmpty())
            <div class="alert alert-info my-4">
                –î–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–æ–≤.
            </div>
        @else
            <div class="table-responsive mt-3">
                <table class="table table-bordered align-middle">
                    <thead class="table-light">
                    <tr>
                        <th scope="col">‚Ññ –∞–∫—Ç–∞</th>
                        <th scope="col">–î–∞—Ç–∞</th>
                        <th scope="col">–¢–∏–ø</th>
                        <th scope="col">–ü–æ–¥–ø–∏—Å—å</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($acts as $act)
                        <tr>
                            <td>{{ $act->act_number }}</td>
                            <td>{{ $act->act_date }}</td>
                            <td>{{ $act->type ?? '-' }}</td>
                            <td>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="signAct({{ $act->id }})">
                                        <i class="bi bi-pen me-1"></i> –ü–æ–¥–ø–∏—Å–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å
                                    </button>

                                    <a href="{{ route('pdf.view', $act->id) }}" class="btn btn-outline-secondary btn-sm" target="_blank">
                                        <i class="bi bi-eye me-1"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                                    </a>

                                    @if (!empty($cmsFiles[$act->id]) && $cmsFiles[$act->id])
                                        <a href="{{ route('cms.download', $act->id) }}" class="btn btn-outline-success btn-sm">
                                            <i class="bi bi-download me-1"></i> –°–∫–∞—á–∞—Ç—å CMS
                                        </a>
                                    @endif
                                </div>
                                <div id="output-{{ $act->id }}" class="small text-muted mt-1"></div>
                            </td>

                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        @endif
    </div>

    <script>
        (() => {
            const NativeWS = WebSocket;
            window.WebSocket = function (url, ...rest) {
                if (typeof url !== 'string') {
                    console.warn('‚ö†Ô∏è WebSocket URL –Ω–µ —Å—Ç—Ä–æ–∫–∞:', url);
                }
                console.trace('WebSocket URL ‚Üí', url);
                return new NativeWS(url, ...rest);
            };
        })();
    </script>
    <script src="/js/ncalayer-client.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


    <script>
        async function signAct(actId) {
            const output = document.getElementById('output-' + actId);
            const setStatus = msg => output.textContent = msg;

            try {
                setStatus('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º PDF...');
                const base64pdf = await fetch(`/pdf/base64/${actId}`)
                    .then(r => r.json())
                    .then(data => data.base64); // –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "JVBERi0xL..."

                setStatus('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NCALayer...');
                const ncl = new NCALayerClient();
                await ncl.connect();

                const tokens = await ncl.getActiveTokens();
                const storageType = tokens[0] || NCALayerClient.fileStorageType;

                setStatus('‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
                const cms = await ncl.createCMSSignatureFromBase64(
                    storageType,
                    base64pdf,
                    'SIGNATURE',
                    true,
                );

                console.log('CMS:', cms.slice(0, 100));

                setStatus('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                await sendCms(actId, cms); // ‚úÖ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º

                setStatus('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–æ!');
            } catch (err) {
                console.error(err);
                setStatus('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
            }
        }

        async function sendCms(actId, cms) {
            const formData = new FormData();
            formData.append('id', actId);
            formData.append('cms', cms);

            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            try {
                const response = await fetch('/pdf/sign', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRF-TOKEN': csrfToken
                        // –ù–ï –¥–æ–±–∞–≤–ª—è–π Content-Type, –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç boundary –¥–ª—è multipart/form-data
                    }
                });

                if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏');
                const result = await response.json();
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ', result);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            }
        }
    </script>


@endsection
